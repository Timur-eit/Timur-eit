{"version":3,"sources":["shared/ui/Modal/ConfirmationModal/index.tsx","components/DeleteUserModal/index.tsx","shared/ui/Modal/HandleDataModal/index.tsx","shared/utils.ts","components/UsersTable/validation/errorMessages.ts","components/UsersTable/validation/validation.tsx","components/TextInput/index.tsx","shared/img/correct-data-button.svg","shared/img/delete-button.svg","components/UserTableRow/index.tsx","components/TableHeader/index.tsx","ducks/userTable.ts","components/UsersTable/index.tsx","components/MainHeader/index.tsx","data/initialTableData.ts","components/LeftSideBar/index.tsx","App.tsx","index.tsx"],"names":["ConfirmationModal","props","modalTitle","contentText","declineButtonLabel","confirmButtonText","openState","setOpenState","confirmAction","handleClose","Modal","show","onHide","centered","backdrop","dialogClassName","Header","Title","Body","Footer","Button","variant","onClick","UserDeleteModal","HandleDataModal","extraAction","children","closeButton","className","getByPlaceholderText","fieldName","errorMessages","lastName","required","firstName","midleName","email","valid","login","validate","values","unblockSubmit","error","test","Object","keys","length","TextInput","inputName","labelName","inputPlaceholder","FormikConnectorTag","touched","errors","name","placeholder","UserTableRow","user","userIndex","correctDataAction","prepareToDeleteUserDataAction","map","userData","i","src","correctDataBtnImg","alt","deleteBtnImg","TableHeader","title","buttonClickAction","GET_USERS_DATA","DELETE_USER_DATA","SET_NEW_USER_DATA","CORRECT_USER_DATA","reducerRecord","tableData","reducer","state","action","type","payload","UsersTable","columnData","initialTableData","defaultFormValues","React","useReducer","tableState","dispatch","useState","tableDataModalShow","setTableDataModalShow","deleteDataModalShow","setDeleteDataModalShow","modifyTableState","setModifyTableState","initialFormValues","setInitialFormValues","setUserIndex","submitAvailable","setSubmitAvailable","correctData","obj","index","prepareToDeleteUserData","deleteUser","dispatcher","prevUsersData","updatedUsersData","filter","_","deleteUserData","getDataModalLabels","labels","confirmButton","useEffect","submitButtonClasses","classNames","item","initialValues","onSubmit","setSubmitting","resetForm","prevUsersDataCopy","unshift","setUserData","filteredUsersData","correctUserData","Field","MainHeader","columnNames","LeftSideBar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0d1e997.chunk.js","sourcesContent":["import { Modal, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.scss';\n\nexport interface IConfirmationWindowProps {\n    modalTitle: string;\n    contentText: string;\n    declineButtonLabel: string;\n    confirmButtonText: string;\n    openState: boolean;\n    setOpenState: (state: boolean) => void;\n    confirmAction: () => void;\n}\n\nfunction ConfirmationModal(props: IConfirmationWindowProps) {\n    const {\n        modalTitle,\n        contentText,\n        declineButtonLabel,\n        confirmButtonText,\n        openState,\n        setOpenState,\n        confirmAction,\n    } = props;\n\n    const handleClose = () => {\n        setOpenState(false);\n    };\n\n    const confirmButtonHandler = () => {\n        confirmAction();\n        handleClose();\n    };\n\n    return (\n        <Modal\n            show={openState}\n            onHide={handleClose}\n            centered\n            backdrop=\"static\"\n            dialogClassName=\"confirmation-modal\"\n        >\n            <Modal.Header>\n                <Modal.Title>{modalTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{contentText}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    {declineButtonLabel}\n                </Button>\n                <Button variant=\"primary\" onClick={confirmButtonHandler}>\n                    {confirmButtonText}\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default ConfirmationModal;\n","import ConfirmationModal from 'shared/ui/Modal/ConfirmationModal';\nexport interface IUserDeleteModalProps {\n    openState: boolean;\n    setOpenState: (state: boolean) => void;\n    confirmAction: () => void;\n}\n\nfunction UserDeleteModal(props: IUserDeleteModalProps) {\n    const { openState, setOpenState, confirmAction } = props;\n\n    return (\n        <ConfirmationModal\n            modalTitle={'Удаление пользователя'}\n            contentText={'Удалить выбранного пользователя?'}\n            declineButtonLabel={'Отменить'}\n            confirmButtonText={'Удалить'}\n            openState={openState}\n            setOpenState={setOpenState}\n            confirmAction={confirmAction}\n        />\n    );\n}\n\nexport default UserDeleteModal;\n","import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.scss';\n\nexport interface IModalWindowProps {\n    modalTitle: string;\n    openState: boolean;\n    setOpenState: (state: boolean) => void;\n    extraAction: () => void;\n    children: React.ReactElement;\n}\n\nfunction HandleDataModal(props: IModalWindowProps) {\n    const { modalTitle, openState, setOpenState, extraAction, children } = props;\n\n    const handleClose = () => {\n        setOpenState(false);\n        extraAction();\n    };\n\n    return (\n        <Modal\n            show={openState}\n            centered\n            onHide={handleClose}\n            backdrop=\"static\"\n            dialogClassName=\"handle-data-modal\"\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>{modalTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"modal-children\">\n                    <div>{children}</div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default HandleDataModal;\n","export function getByPlaceholderText(fieldName: string): string {\n    switch (fieldName) {\n        case 'lastName':\n            return 'Введите фамилию';\n        case 'firstName':\n            return 'Введите имя';\n        case 'midleName':\n            return 'Введите отчество';\n        case 'email':\n            return 'Введите электронную почту';\n        case 'login':\n            return 'Введите логин';\n        default:\n            return '';\n    }\n}\n","interface IErrorMessages {\n    [fieldName: string]: {\n        required?: string;\n        valid?: string;\n    };\n}\n\nconst errorMessages: IErrorMessages = {\n    lastName: {\n        required: 'укажите фамилию',\n    },\n    firstName: {\n        required: 'укажите имя',\n    },\n    midleName: {\n        required: 'укажите отчество',\n    },\n    email: {\n        required: 'укажите электронную почту',\n        valid: 'укажите корректный формат email',\n    },\n    login: {\n        required: 'укажите логин',\n    },\n};\n\nexport default errorMessages;\n","import errorMessages from './errorMessages';\n\ninterface IError {\n    [field: string]: string | undefined;\n}\n\nfunction validate(values: any, unblockSubmit?: (state: boolean) => void): IError {\n    const error: IError = {};\n    if (!values.lastName) {\n        error.lastName = errorMessages.lastName.required;\n    }\n    if (!values.firstName) {\n        error.firstName = errorMessages.firstName.required;\n    }\n    if (!values.midleName) {\n        error.firstName = errorMessages.firstName.required;\n    }\n    if (!values.email) {\n        error.email = errorMessages.email.required;\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        error.email = errorMessages.email.valid;\n    }\n    if (!values.login) {\n        error.login = errorMessages.login.required;\n    }\n\n    if (Object.keys(error).length === 0) {\n        unblockSubmit && unblockSubmit(true);\n    } else {\n        unblockSubmit && unblockSubmit(false);\n    }\n    return error;\n}\n\nexport default validate;\n","import React from 'react';\nimport { FieldAttributes, FormikTouched, FormikErrors } from 'formik';\nimport './style.scss';\n\ntype FormikField = FieldAttributes<any>;\ninterface ITextInputProps {\n    inputName: string;\n    labelName: string | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n    required: boolean;\n    inputPlaceholder?: string;\n    FormikConnectorTag: FormikField;\n    touched?: FormikTouched<any>;\n    errors?: FormikErrors<any>;\n}\n\nfunction TextInput(props: ITextInputProps) {\n    const { inputName, labelName, inputPlaceholder, required, FormikConnectorTag, touched, errors } =\n        props;\n\n    return (\n        <label className=\"text-input\">\n            <div className=\"label-name\">{labelName}</div>\n            <FormikConnectorTag name={inputName} placeholder={inputPlaceholder} />\n            {required && touched && touched[inputName] && errors && errors[inputName] && (\n                <p className=\"error-message\">{errors[inputName]}</p>\n            )}\n        </label>\n    );\n}\n\nexport default TextInput;\n","export default __webpack_public_path__ + \"static/media/correct-data-button.8ed39f47.svg\";","export default __webpack_public_path__ + \"static/media/delete-button.0e5abf8f.svg\";","import React from 'react';\nimport { IUserData } from 'ducks/userTable';\n\nimport correctDataBtnImg from 'shared/img/correct-data-button.svg';\nimport deleteBtnImg from 'shared/img/delete-button.svg';\n\nimport './style.scss';\n\ninterface IUserTableRowProps {\n    user: IUserData;\n    userIndex: number;\n    correctDataAction: (user: IUserData, usrIndex: number) => void;\n    prepareToDeleteUserDataAction: (usrIndex: number) => void;\n}\n\nfunction UserTableRow(props: IUserTableRowProps) {\n    const { user, userIndex, correctDataAction, prepareToDeleteUserDataAction } = props;\n\n    return (\n        <tr className=\"tbdoy-row\" key={user.login + userIndex}>\n            {Object.keys(user).map((userData, i) => {\n                return <td key={userData + i}>{user[userData]}</td>;\n            })}\n            <td className=\"tbdoy-row__control-panel\">\n                <img\n                    src={correctDataBtnImg}\n                    alt=\"correct data\"\n                    onClick={() => correctDataAction(user, userIndex)}\n                />\n                <img\n                    src={deleteBtnImg}\n                    alt=\"delete data\"\n                    onClick={() => prepareToDeleteUserDataAction(userIndex)}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default UserTableRow;\n","import { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.scss';\n\ninterface ITableHeaderProps {\n    title: string;\n    buttonClickAction: () => void;\n}\n\nfunction TableHeader(props: ITableHeaderProps) {\n    const { title, buttonClickAction } = props;\n\n    return (\n        <div className=\"table-header\">\n            <div className=\"table-header__title\">{title}</div>\n            <div className=\"table-header__buttons-block\">\n                <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                        buttonClickAction();\n                    }}\n                >\n                    <div className=\"cross\"></div>\n                    <span>Добавить</span>\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nexport default TableHeader;\n","import React from 'react';\n\nconst GET_USERS_DATA = 'GET_USERS_DATA';\nconst DELETE_USER_DATA = 'DELETE_USER_DATA';\nexport const SET_NEW_USER_DATA = 'SET_NEW_USER_DATA';\nexport const CORRECT_USER_DATA = 'CORRECT_USER_DATA';\n\nexport interface IUserData {\n    [property: string]: string;\n    lastName: string;\n    firstName: string;\n    midleName: string;\n    email: string;\n    login: string;\n}\n\nexport type usersTableAction = { type: string; payload: null | IUserData[] };\n\nexport interface IReducerRecord {\n    tableData: null | IUserData[];\n}\n\nexport const reducerRecord: IReducerRecord = {\n    tableData: null,\n};\n\nexport const reducer: React.Reducer<IReducerRecord, usersTableAction> = (state, action) => {\n    switch (action.type) {\n        case GET_USERS_DATA:\n            return {\n                ...state,\n                tableData: action.payload,\n            };\n        case DELETE_USER_DATA:\n            return {\n                ...state,\n                tableData: action.payload,\n            };\n        case SET_NEW_USER_DATA:\n            return {\n                ...state,\n                tableData: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\ntype usersTableActionCreator = (\n    dispatcher: (action: any) => void,\n    state: IReducerRecord,\n    ...params: any\n) => void;\n\nexport const getUsersList: usersTableActionCreator = (dispatcher, _state, usersList: IUserData[]) => {\n    const action: usersTableAction = {\n        type: GET_USERS_DATA,\n        payload: usersList,\n    };\n    dispatcher(action);\n};\n\nexport const deleteUserData: usersTableActionCreator = (dispatcher, state, userIndex: number) => {\n    const prevUsersData = state && state.tableData;\n    const updatedUsersData = prevUsersData && [...prevUsersData].filter((_, i) => i !== userIndex);\n\n    const action: usersTableAction = {\n        type: DELETE_USER_DATA,\n        payload: updatedUsersData,\n    };\n    dispatcher(action);\n};\n\nexport const setUserData: usersTableActionCreator = (dispatcher, state, userData: IUserData) => {\n    const prevUsersData = state.tableData as IUserData[];\n    const prevUsersDataCopy = [...prevUsersData];\n    prevUsersDataCopy.unshift(userData);\n    const updatedUsersData = prevUsersDataCopy;\n\n    const action: usersTableAction = {\n        type: SET_NEW_USER_DATA,\n        payload: updatedUsersData,\n    };\n    dispatcher(action);\n};\n\nexport const correctUserData: usersTableActionCreator = (\n    dispatcher,\n    state,\n    userData: IUserData,\n    index: number\n) => {\n    const prevUsersData = state.tableData as IUserData[];\n    const filteredUsersData = [...prevUsersData].filter((_, i) => i !== index);\n    filteredUsersData.unshift(userData);\n    const updatedUsersData = filteredUsersData;\n\n    const action: usersTableAction = {\n        type: SET_NEW_USER_DATA,\n        payload: updatedUsersData,\n    };\n\n    dispatcher(action);\n};\n","import React from 'react';\nimport { Formik, Field, Form, FormikHelpers } from 'formik';\nimport classNames from 'classnames';\nimport { Button, Modal } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.scss';\n\nimport UserDeleteModal from 'components/DeleteUserModal';\nimport HandleDataModal from 'shared/ui/Modal/HandleDataModal';\nimport { IColumnsNames } from 'data/initialTableData';\nimport { getByPlaceholderText } from 'shared/utils';\nimport validate from 'components/UsersTable/validation/validation';\nimport TextInput from 'components/TextInput';\nimport UserTableRow from 'components/UserTableRow';\nimport TableHeader from 'components/TableHeader';\n\nimport {\n    IUserData,\n    usersTableAction,\n    reducer,\n    reducerRecord,\n    IReducerRecord,\n    getUsersList,\n    deleteUserData,\n    setUserData,\n    correctUserData,\n    SET_NEW_USER_DATA,\n    CORRECT_USER_DATA,\n} from 'ducks/userTable';\n\ninterface IUsersTableProps {\n    columnData: IColumnsNames;\n    initialTableData: IUserData[];\n    defaultFormValues: IUserData;\n}\n\nfunction UsersTable(props: IUsersTableProps) {\n    const { columnData, initialTableData, defaultFormValues } = props;\n\n    const [tableState, dispatch] = React.useReducer<React.Reducer<IReducerRecord, usersTableAction>>(\n        reducer,\n        reducerRecord\n    );\n    const [tableDataModalShow, setTableDataModalShow] = React.useState<boolean>(false);\n    const [deleteDataModalShow, setDeleteDataModalShow] = React.useState<boolean>(false);\n    const [modifyTableState, setModifyTableState] = React.useState<null | string>(null);\n    const [initialFormValues, setInitialFormValues] = React.useState<IUserData>(defaultFormValues);\n    const [userIndex, setUserIndex] = React.useState<null | number>(null);\n    const [submitAvailable, setSubmitAvailable] = React.useState<boolean>(false);\n\n    function correctData(obj: IUserData, index: number): void {\n        setModifyTableState(CORRECT_USER_DATA);\n        setInitialFormValues(obj);\n        setTableDataModalShow(true);\n        setUserIndex(index);\n    }\n\n    function prepareToDeleteUserData(userIndex: number): void {\n        setUserIndex(userIndex);\n        setDeleteDataModalShow(true);\n    }\n\n    function deleteUser(): void {\n        deleteUserData(dispatch, tableState, userIndex);\n        setUserIndex(null);\n    }\n\n    interface ILabels {\n        title: string;\n        confirmButton: string;\n    }\n\n    function getDataModalLabels(): ILabels {\n        const labels: ILabels = {\n            title: '',\n            confirmButton: '',\n        };\n        if (modifyTableState === SET_NEW_USER_DATA) {\n            labels.title = 'Создание пользователя';\n            labels.confirmButton = 'Создать';\n        } else if (modifyTableState === CORRECT_USER_DATA) {\n            labels.title = 'Редактирование пользователя';\n            labels.confirmButton = 'Сохранить';\n        } else {\n            labels.title = '';\n            labels.confirmButton = '';\n        }\n        return labels;\n    }\n\n    React.useEffect(() => {\n        if (!tableState.tableData) {\n            getUsersList(dispatch, tableState, initialTableData);\n        }\n    }, [tableState, initialTableData]);\n\n    const submitButtonClasses = classNames({\n        'submit-btn': true,\n        'submit-btn--disabled': !submitAvailable,\n    });\n\n    return (\n        <div className=\"table\">\n            <TableHeader\n                title={'Пользователи'}\n                buttonClickAction={() => {\n                    setTableDataModalShow(true);\n                    setModifyTableState(SET_NEW_USER_DATA);\n                }}\n            />\n\n            <table>\n                <thead>\n                    <tr className=\"table-row\">\n                        {Object.values(columnData).map((item) => {\n                            return <th key={item}>{item}</th>;\n                        })}\n                        <th></th>\n                    </tr>\n                </thead>\n                {tableState.tableData &&\n                    tableState.tableData.map((user, i) => {\n                        return (\n                            <tbody key={user.login + i}>\n                                <UserTableRow\n                                    user={user}\n                                    userIndex={i}\n                                    correctDataAction={correctData}\n                                    prepareToDeleteUserDataAction={prepareToDeleteUserData}\n                                />\n                            </tbody>\n                        );\n                    })}\n            </table>\n\n            <UserDeleteModal\n                openState={deleteDataModalShow}\n                setOpenState={setDeleteDataModalShow}\n                confirmAction={() => deleteUser()}\n            />\n\n            <HandleDataModal\n                openState={tableDataModalShow}\n                setOpenState={setTableDataModalShow}\n                modalTitle={getDataModalLabels().title}\n                extraAction={() => setInitialFormValues(defaultFormValues)}\n                children={\n                    <>\n                        <Formik\n                            initialValues={initialFormValues}\n                            onSubmit={(\n                                values: IUserData,\n                                { setSubmitting, resetForm }: FormikHelpers<IUserData>\n                            ) => {\n                                if (modifyTableState === SET_NEW_USER_DATA) {\n                                    setUserData(dispatch, tableState, values);\n                                } else {\n                                    correctUserData(dispatch, tableState, values, userIndex);\n                                    setInitialFormValues(defaultFormValues);\n                                }\n                                setTableDataModalShow(false);\n                                setSubmitting(false);\n                                resetForm();\n                                setModifyTableState(null);\n                            }}\n                            validate={(values) => validate(values, setSubmitAvailable)}\n                        >\n                            {({ errors, touched }) => (\n                                <Form>\n                                    {Object.keys(columnData).map((fieldName, i) => {\n                                        return (\n                                            <div key={fieldName + i}>\n                                                <TextInput\n                                                    inputName={fieldName}\n                                                    labelName={columnData[fieldName]}\n                                                    inputPlaceholder={getByPlaceholderText(fieldName)}\n                                                    required={true}\n                                                    FormikConnectorTag={Field}\n                                                    touched={touched}\n                                                    errors={errors}\n                                                />\n                                            </div>\n                                        );\n                                    })}\n                                    <Modal.Footer>\n                                        <Button className={submitButtonClasses} type=\"submit\">\n                                            {getDataModalLabels().confirmButton}\n                                        </Button>\n                                    </Modal.Footer>\n                                </Form>\n                            )}\n                        </Formik>\n                    </>\n                }\n            />\n        </div>\n    );\n}\n\nexport default UsersTable;\n","import './style.scss';\n\nfunction MainHeader() {\n    return <div className=\"header\"></div>;\n}\n\nexport default MainHeader;\n","import { IUserData } from 'ducks/userTable';\nexport interface IColumnsNames {\n    [fieldName: string]: string;\n}\n\nexport const columnNames: IColumnsNames = {\n    lastName: 'Фамилия',\n    firstName: 'Имя',\n    midleName: 'Отчество',\n    email: 'E-mail',\n    login: 'Логин',\n};\n\nexport const defaultFormValues: IUserData = {\n    lastName: '',\n    firstName: '',\n    midleName: '',\n    email: '',\n    login: '',\n};\n\nexport const initialTableData: IUserData[] = [\n    {\n        lastName: 'Иванов',\n        firstName: 'Иван',\n        midleName: 'Иванович',\n        email: 'mail1@mail.com',\n        login: 'user1',\n    },\n    {\n        lastName: 'Петров',\n        firstName: 'Петр',\n        midleName: 'Сергеевич',\n        email: 'mail2@mail.com',\n        login: 'user2',\n    },\n    {\n        lastName: 'Сергеев',\n        firstName: 'Григорий',\n        midleName: 'Викторович',\n        email: 'mail3@mail.com',\n        login: 'user3',\n    },\n    {\n        lastName: 'Федоров',\n        firstName: 'Виктор',\n        midleName: 'Федорович',\n        email: 'mail4@mail.com',\n        login: 'user4',\n    },\n    {\n        lastName: 'Хвастунов',\n        firstName: 'Сергей',\n        midleName: 'Петрович',\n        email: 'mail5@mail.com',\n        login: 'user5',\n    },\n    {\n        lastName: 'Григорьев',\n        firstName: 'Федор',\n        midleName: 'Григорьевич',\n        email: 'mail6@mail.com',\n        login: 'user6',\n    },\n];\n","import './style.scss';\n\nfunction LeftSideBar() {\n    return <div className=\"left-side-bar\"></div>;\n}\n\nexport default LeftSideBar;\n","import React from 'react';\nimport UsersTable from 'components/UsersTable';\nimport MainHeader from 'components/MainHeader';\nimport { columnNames, defaultFormValues, initialTableData } from 'data/initialTableData';\nimport LeftSideBar from 'components/LeftSideBar';\nimport 'App.scss';\n\nfunction App() {\n    return (\n        <div className=\"userData-table-container\">\n            <MainHeader />\n            <div className=\"userData-table-container__content\">\n                <LeftSideBar />\n                <UsersTable\n                    columnData={columnNames}\n                    initialTableData={initialTableData}\n                    defaultFormValues={defaultFormValues}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}