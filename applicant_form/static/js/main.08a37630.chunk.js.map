{"version":3,"sources":["components/FileInput/img/file_ready.svg","components/FileInput/img/file_error.svg","components/FileInput/index.tsx","shared/ui/Modal/index.tsx","components/SubmitModal/submitModalData.tsx","components/SubmitModal/index.tsx","components/PrivacyPolicyModal/privacyPolicyContent.tsx","components/PrivacyPolicyModal/privacyPolicyModalData.tsx","components/PrivacyPolicyModal/index.tsx","components/ApplicantForm/validation/errorMessages.ts","components/ApplicantForm/validation/validation.tsx","components/TextInput/index.tsx","components/RadioInput/index.tsx","components/Checkbox/index.tsx","components/ApplicantForm/formData.tsx","shared/utils.ts","components/ApplicantForm/ApplicantForm.tsx","ducks/applicatForm.ts","components/ApplicantForm/index.ts","App.tsx","reportWebVitals.ts","redux/reducer.ts","redux/store.ts","index.tsx"],"names":["FileInput","props","React","useState","fileReady","setFileReady","readyFileName","setReadyFileName","labelName","inputName","setFieldValue","required","errors","isDataSubmitted","cancelFile","isError","fileReadyClasses","classNames","useEffect","className","name","type","multiple","onChange","event","files","target","fileName","onClick","src","fileErrorImg","fileReadyImg","alt","ModalWindow","modalData","declineButton","openState","setOpenState","additionalStateHandler","acceptAction","declineAction","onHide","handleClose","Modal","show","centered","Body","Title","title","content","Button","variant","closeButtonLabel","getSubmitModalData","userName","SubmitModal","submitMessage","privacyPolicyContent","getPolicyModalData","PrivatePolicyModal","errorMessages","firstName","lastName","email","valid","gender","privacyPolicy","file","validate","values","unblockSubmit","error","test","length","size","Object","keys","TextInput","inputPlaceholder","FormikConnectorTag","touched","placeholder","RadioInput","generalLabelName","radioInputData","map","input","i","value","Checkbox","checkboxData","externalAction","isChecked","setChecked","checked","includes","link","formBlocks","privateData","inputs","label","defaultValue","options","gitHubSection","privacyPolicyCheck","allInputs","reduce","prev","curr","push","inputDefaultValues","console","log","ApplicantForm","isOpenSubmitWindow","isOpenPolicyWindow","setOpenSubmitWindow","setOpenPolicyWindow","checkedValues","setCheckedValues","isSubmitAvailable","setSubmitAvailable","formDataHandler","submitButtonClasses","initialValues","onSubmit","resetForm","Field","checkBoxName","checkBoxValue","setState","setFormikValue","moduleName","SET_OPEN_SUBMIT_WINDOW","SET_OPEN_POLICY_WINDOW","SET_CHECKED_VALUES","SET_SUBMIT_AVAILABLE","SET_USER_NAME","HANDLE_FORM_DATA","CATCH_ERROR","SET_DATA_SUBMITTED","reducerRecord","formData","stateSelector","state","isOpenSubmitWindowSelector","createSelector","isOpenPolicyWindowSelector","checkedValuesSelector","isSubmitAvailableSelector","userNameSelector","formDataSelector","isDataSubmittedSelector","connect","dispatch","payload","checkboxValue","getState","currentCheckedValues","nextCheckedValues","filter","submitState","formValues","a","dataToSend","response","data","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","applicantForm","action","assign","enhancer","applyMiddleware","thunk","logger","store","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08a37630.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/file_ready.9f3a9430.svg\";","export default __webpack_public_path__ + \"static/media/file_error.738e1dc8.svg\";","import React from \"react\";\nimport { FormikTouched, FormikErrors } from \"formik\";\nimport \"./style.scss\";\nimport fileReadyImg from \"./img/file_ready.svg\";\nimport fileErrorImg from \"./img/file_error.svg\";\nimport classNames from \"classnames\";\nimport { useEffect } from \"react\";\n\ninterface IFileInputProps {\n  labelName:\n    | string\n    | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n  inputName: string;\n  setFieldValue: (inputName: string, files: FileList | null) => void;\n  required: boolean;\n  touched?: FormikTouched<any>;\n  errors?: FormikErrors<any>;\n  isDataSubmitted?: boolean;\n}\n\nconst FileInput: React.FC<IFileInputProps> = (props) => {\n  const [fileReady, setFileReady] = React.useState<boolean>(false);\n  const [readyFileName, setReadyFileName] = React.useState<string | null>(null);\n\n  const {\n    labelName,\n    inputName,\n    setFieldValue,\n    required,\n    errors,\n    isDataSubmitted,\n  } = props;\n\n  const cancelFile = () => {\n    setFileReady(false);\n    setReadyFileName(null);\n    setFieldValue(inputName, null);\n  };\n\n  const isError = (): boolean => {\n    return errors && errors[inputName] ? true : false;\n  };\n\n  const fileReadyClasses = classNames({\n    \"file-ready\": true,\n    \"file-ready--error\": isError(),\n  });\n\n  useEffect(() => {\n    if (isDataSubmitted) {\n      cancelFile();\n    }\n  }, [isDataSubmitted]);\n\n  return (\n    <div className=\"file-container\">\n      {!fileReady && (\n        <label className=\"file-label\">\n          <input\n            name={inputName}\n            type=\"file\"\n            multiple={false}\n            onChange={(event: any) => {\n              const files: FileList | null = event.target.files;\n              setFieldValue(inputName, files);\n              const fileName = files && files[0].name;\n              setFileReady(true);\n              setReadyFileName(fileName);\n            }}\n          />\n          <div className=\"file-label__cross\"></div>\n          <p>{labelName}</p>\n        </label>\n      )}\n\n      {required && isError() && (\n        <p className=\"error-message\">{errors && errors[inputName]}</p>\n      )}\n\n      {fileReady && (\n        <div className={fileReadyClasses} onClick={cancelFile}>\n          <img\n            src={!isError() ? fileReadyImg : fileErrorImg}\n            alt={\"file uploaded to browser\"}\n          />\n          <span>{readyFileName}</span>\n          <div className=\"deactivate-btn\"></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileInput;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./style.scss\";\nimport { IModalData } from \"shared/interfaces\";\n\nexport interface IModalWindowProps {\n  modalData: IModalData | null;\n  declineButton: boolean;\n  openState: boolean;\n  setOpenState: (state: boolean) => void;\n  additionalStateHandler?: (state: boolean) => void;\n  acceptAction?: () => void;\n  declineAction?: () => void;\n  onHide?: boolean;\n}\n\nfunction ModalWindow(props: IModalWindowProps) {\n  const {\n    modalData,\n    declineButton,\n    openState,\n    setOpenState,\n    additionalStateHandler,\n    acceptAction,\n    declineAction,\n    onHide,\n  } = props;\n\n  const handleClose = (): void => {\n    setOpenState(false);\n\n    if (additionalStateHandler) {\n      additionalStateHandler(true);\n    }\n    if (acceptAction) {\n      acceptAction();\n    }\n  };\n\n  const declineHanlder = (): void => {\n    if (declineAction) {\n      declineAction();\n      setOpenState(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (openState) {\n      setOpenState(true);\n    }\n  }, [openState, setOpenState]);\n\n  return (\n    <>\n      <Modal\n        show={openState}\n        onHide={onHide ? () => handleClose() : null}\n        centered\n      >\n        <Modal.Body>\n          <div className=\"modal-title-block\">\n            <Modal.Title>{modalData && modalData.title}</Modal.Title>\n            {declineButton && (\n              <div\n                onClick={() => declineHanlder()}\n                className={\"decline-btn\"}\n              ></div>\n            )}\n          </div>\n          {modalData && modalData.content}\n          <Button variant=\"primary\" onClick={handleClose}>\n            {modalData && modalData.closeButtonLabel}\n          </Button>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default ModalWindow;\n","import { ModalDataHandler, IModalData } from \"shared/interfaces\";\n\nconst getSubmitModalData: ModalDataHandler = (userName): IModalData => {\n  return {\n    title: `Спасибо ${userName}!`,\n    content: <p>Мы скоро свяжемся с вами</p>,\n    closeButtonLabel: \"Понятно\",\n  };\n};\n\nexport default getSubmitModalData;\n","import ModalWindow from \"shared/ui/Modal\";\nimport getSubmitModalData from \"./submitModalData\";\n\nexport interface ISubmitModalProps {\n  userName: string | null;\n  openState: boolean;\n  setOpenState: (state: boolean) => void;\n  // additionalStateHandler: (state: boolean) => void,\n}\n\nfunction SubmitModal(props: ISubmitModalProps) {\n  const { userName, openState, setOpenState } = props;\n\n  const submitMessage = userName ? getSubmitModalData(userName) : null;\n\n  return (\n    <ModalWindow\n      modalData={submitMessage}\n      declineButton={false}\n      openState={openState}\n      setOpenState={setOpenState}\n      // additionalStateHandler={additionalStateHandler}\n    />\n  );\n}\n\nexport default SubmitModal;\n","import React from \"react\";\nimport \"./style.scss\";\n\nconst privacyPolicyContent: React.ReactElement<string, string> = (\n  <div className=\"content\">\n    <pre>\n      1. Общие положения Настоящая политика обработки персональных данных\n      составлена в соответствии с требованиями Федерального закона от\n      27.07.2006. №152-ФЗ «О персональных данных» и определяет порядок обработки\n      персональных данных и меры по обеспечению безопасности персональных\n      данных, предпринимаемые Михайловым Иваном Сергеевичем (далее – Оператор).\n      1.1. Оператор ставит своей важнейшей целью и условием осуществления своей\n      деятельности соблюдение прав и свобод человека и гражданина при обработке\n      его персональных данных, в том числе защиты прав на неприкосновенность\n      частной жизни, личную и семейную тайну. 1.2. Настоящая политика Оператора\n      в отношении обработки персональных данных (далее – Политика) применяется\n      ко всей информации, которую Оператор может получить о посетителях\n      веб-сайта httpsː//thismywebsite·com. 2. Основные понятия, используемые в\n      Политике 2.1. Автоматизированная обработка персональных данных – обработка\n      персональных данных с помощью средств вычислительной техники; 2.2.\n      Блокирование персональных данных – временное прекращение обработки\n      персональных данных (за исключением случаев, если обработка необходима для\n      уточнения персональных данных); 2.3. Веб-сайт – совокупность графических и\n      информационных материалов, а также программ для ЭВМ и баз данных,\n      обеспечивающих их доступность в сети интернет по сетевому адресу\n      httpsː//thismywebsite·com; 2.4. Информационная система персональных данных\n      — совокупность содержащихся в базах данных персональных данных, и\n      обеспечивающих их обработку информационных технологий и технических\n      средств; 2.5. Обезличивание персональных данных — действия, в результате\n      которых невозможно определить без использования дополнительной информации\n      принадлежность персональных данных конкретному Пользователю или иному\n      субъекту персональных данных; 2.6. Обработка персональных данных – любое\n      действие (операция) или совокупность действий (операций), совершаемых с\n      использованием средств автоматизации или без использования таких средств с\n      персональными данными, включая сбор, запись, систематизацию, накопление,\n      хранение, уточнение (обновление, изменение), извлечение, использование,\n      передачу (распространение, предоставление, доступ), обезличивание,\n      блокирование, удаление, уничтожение персональных данных; 2.7. Оператор –\n      государственный орган, муниципальный орган, юридическое или физическое\n      лицо, самостоятельно или совместно с другими лицами организующие и (или)\n      осуществляющие обработку персональных данных, а также определяющие цели\n      обработки персональных данных, состав персональных данных, подлежащих\n      обработке, действия (операции), совершаемые с персональными данными; 2.8.\n      Персональные данные – любая информация, относящаяся прямо или косвенно к\n      определенному или определяемому Пользователю веб-сайта\n      httpsː//thismywebsite·com; 2.9. Пользователь – любой посетитель веб-сайта\n      httpsː//thismywebsite·com; 2.10. Предоставление персональных данных –\n      действия, направленные на раскрытие персональных данных определенному лицу\n      или определенному кругу лиц; 2.11. Распространение персональных данных –\n      любые действия, направленные на раскрытие персональных данных\n      неопределенному кругу лиц (передача персональных данных) или на\n      ознакомление с персональными данными неограниченного круга лиц, в том\n      числе обнародование персональных данных в средствах массовой информации,\n      размещение в информационно-телекоммуникационных сетях или предоставление\n      доступа к персональным данным каким-либо иным способом; 2.12.\n      Трансграничная передача персональных данных – передача персональных данных\n      на территорию иностранного государства органу власти иностранного\n      государства, иностранному физическому или иностранному юридическому лицу;\n      2.13. Уничтожение персональных данных – любые действия, в результате\n      которых персональные данные уничтожаются безвозвратно с невозможностью\n      дальнейшего восстановления содержания персональных данных в информационной\n      системе персональных данных и (или) уничтожаются материальные носители\n      персональных данных. 3. Оператор может обрабатывать следующие персональные\n      данные Пользователя 3.1. Фамилия, имя, отчество; 3.2. Номер телефона; 3.3.\n      Адрес электронной почты; 3.4. Также на сайте происходит сбор и обработка\n      обезличенных данных о посетителях (в т.ч. файлов «cookie») с помощью\n      сервисов интернет-статистики (Яндекс Метрика и Гугл Аналитика и других).\n      3.5. Вышеперечисленные данные далее по тексту Политики объединены общим\n      понятием Персональные данные. 4. Цели обработки персональных данных 4.1.\n      Цель обработки персональных данных Пользователя — заключение, исполнение и\n      прекращение гражданско-правовых договоров; предоставление доступа\n      Пользователю к сервисам, информации и/или материалам, содержащимся на\n      веб-сайте httpsː//thismywebsite·com; уточнение деталей заказа. 4.2. Также\n      Оператор имеет право направлять Пользователю уведомления о новых продуктах\n      и услугах, специальных предложениях и различных событиях. Пользователь\n      всегда может отказаться от получения информационных сообщений, направив\n      Оператору письмо на адрес электронной почты privacy@thismywebsite·com с\n      пометкой «Отказ от уведомлений о новых продуктах и услугах и специальных\n      предложениях». 4.3. Обезличенные данные Пользователей, собираемые с\n      помощью сервисов интернет-статистики, служат для сбора информации о\n      действиях Пользователей на сайте, улучшения качества сайта и его\n      содержания. 5. Правовые основания обработки персональных данных 5.1.\n      Оператор обрабатывает персональные данные Пользователя только в случае их\n      заполнения и/или отправки Пользователем самостоятельно через специальные\n      формы, расположенные на сайте httpsː//thismywebsite·com. Заполняя\n      соответствующие формы и/или отправляя свои персональные данные Оператору,\n      Пользователь выражает свое согласие с данной Политикой. 5.2. Оператор\n      обрабатывает обезличенные данные о Пользователе в случае, если это\n      разрешено в настройках браузера Пользователя (включено сохранение файлов\n      «cookie» и использование технологии JavaScript). 6. Порядок сбора,\n      хранения, передачи и других видов обработки персональных данных\n      Безопасность персональных данных, которые обрабатываются Оператором,\n      обеспечивается путем реализации правовых, организационных и технических\n      мер, необходимых для выполнения в полном объеме требований действующего\n      законодательства в области защиты персональных данных. 6.1. Оператор\n      обеспечивает сохранность персональных данных и принимает все возможные\n      меры, исключающие доступ к персональным данным неуполномоченных лиц. 6.2.\n      Персональные данные Пользователя никогда, ни при каких условиях не будут\n      переданы третьим лицам, за исключением случаев, связанных с исполнением\n      действующего законодательства. 6.3. В случае выявления неточностей в\n      персональных данных, Пользователь может актуализировать их самостоятельно,\n      путем направления Оператору уведомление на адрес электронной почты\n      Оператора privacy@thismywebsite·com с пометкой «Актуализация персональных\n      данных». 6.4. Срок обработки персональных данных является неограниченным.\n      Пользователь может в любой момент отозвать свое согласие на обработку\n      персональных данных, направив Оператору уведомление посредством\n      электронной почты на электронный адрес Оператора privacy@thismywebsite·com\n      с пометкой «Отзыв согласия на обработку персональных данных». 7.\n      Трансграничная передача персональных данных 7.1. Оператор до начала\n      осуществления трансграничной передачи персональных данных обязан убедиться\n      в том, что иностранным государством, на территорию которого предполагается\n      осуществлять передачу персональных данных, обеспечивается надежная защита\n      прав субъектов персональных данных. 7.2. Трансграничная передача\n      персональных данных на территории иностранных государств, не отвечающих\n      вышеуказанным требованиям, может осуществляться только в случае наличия\n      согласия в письменной форме субъекта персональных данных на трансграничную\n      передачу его персональных данных и/или исполнения договора, стороной\n      которого является субъект персональных данных. 8. Заключительные положения\n      8.1. Пользователь может получить любые разъяснения по интересующим\n      вопросам, касающимся обработки его персональных данных, обратившись к\n      Оператору с помощью электронной почты privacy@thismywebsite·com. 8.2. В\n      данном документе будут отражены любые изменения политики обработки\n      персональных данных Оператором. Политика действует бессрочно до замены ее\n      новой версией. 8.3. Актуальная версия Политики в свободном доступе\n      расположена в сети Интернет по адресу httpsː//thismywebsite·com/privacy/.\n    </pre>\n  </div>\n);\n\nexport default privacyPolicyContent;\n","import { ModalDataHandler, IModalData } from \"shared/interfaces\";\nimport privacyPolicyContent from \"./privacyPolicyContent\";\n\nconst getPolicyModalData: ModalDataHandler = (): IModalData => {\n  return {\n    title: \"Политика конфиденциальности\",\n    content: privacyPolicyContent,\n    closeButtonLabel: \"Я согласен\",\n  };\n};\n\nexport default getPolicyModalData;\n","import React from \"react\";\nimport ModalWindow from \"shared/ui/Modal\";\nimport getPolicyModalData from \"./privacyPolicyModalData\";\nimport \"./style.scss\";\n\nexport interface IPrivatePolicyModalProps {\n  openState: boolean;\n  setOpenState: (state: boolean) => void;\n  acceptAction: () => void;\n  declineAction: () => void;\n}\n\nfunction PrivatePolicyModal(props: IPrivatePolicyModalProps) {\n  const { openState, setOpenState, acceptAction, declineAction } = props;\n\n  return (\n    <ModalWindow\n      modalData={getPolicyModalData()}\n      declineButton={true}\n      openState={openState}\n      setOpenState={setOpenState}\n      acceptAction={acceptAction}\n      declineAction={declineAction}\n    />\n  );\n}\n\nexport default PrivatePolicyModal;\n","interface IErrorMessages {\n  [fieldName: string]: {\n    required?: string;\n    valid?: string;\n  };\n}\n\nconst errorMessages: IErrorMessages = {\n  firstName: {\n    required: \"укажите имя\",\n  },\n  lastName: {\n    required: \"укажите фамилию\",\n  },\n  email: {\n    required: \"укажите электронную почту\",\n    valid: \"укажите корректный формат email\",\n  },\n  gender: {\n    required: \"укажите пол\",\n  },\n  privacyPolicy: {\n    required: \"необходимо принять условия\",\n  },\n  file: {\n    valid: \"загружайте файл размером не более 16 mb\",\n  },\n};\n\nexport default errorMessages;\n","import errorMessages from \"./errorMessages\";\n\nconst MAX_FILE_SIZE = 16777216; //\n\ninterface IError {\n  [field: string]: string | undefined;\n}\n\nfunction validate(\n  values: any,\n  unblockSubmit?: (state: boolean) => void\n): IError {\n  const error: IError = {};\n  if (!values.firstName) {\n    error.firstName = errorMessages.firstName.required;\n  }\n  if (!values.lastName) {\n    error.lastName = errorMessages.lastName.required;\n  }\n  if (!values.email) {\n    error.email = errorMessages.email.required;\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n    error.email = errorMessages.email.valid;\n  }\n  if (!values.gender) {\n    error.gender = errorMessages.gender.required;\n  }\n  if (values.privacyPolicy.length === 0) {\n    error.privacyPolicy = errorMessages.privacyPolicy.required;\n  }\n  if (values.file && values.file[0].size > MAX_FILE_SIZE) {\n    error.file = errorMessages.file.valid;\n  }\n  if (Object.keys(error).length === 0) {\n    unblockSubmit && unblockSubmit(true);\n  } else {\n    unblockSubmit && unblockSubmit(false);\n  }\n  return error;\n}\n\nexport default validate;\n","import React from \"react\";\nimport { FieldAttributes, FormikTouched, FormikErrors } from \"formik\";\nimport \"./style.scss\";\n\ntype FormikField = FieldAttributes<any>;\ninterface ITextInputProps {\n  inputName: string;\n  labelName:\n    | string\n    | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n  required: boolean;\n  inputPlaceholder?: string;\n  FormikConnectorTag: FormikField;\n  touched?: FormikTouched<any>;\n  errors?: FormikErrors<any>;\n}\n\nfunction TextInput(props: ITextInputProps) {\n  const {\n    inputName,\n    labelName,\n    inputPlaceholder,\n    required,\n    FormikConnectorTag,\n    touched,\n    errors,\n  } = props;\n\n  return (\n    <label className=\"text-input\">\n      <div className=\"label-name\">{labelName}</div>\n      <FormikConnectorTag name={inputName} placeholder={inputPlaceholder} />\n      {required &&\n        touched &&\n        touched[inputName] &&\n        errors &&\n        errors[inputName] && (\n          <p className=\"error-message\">{errors[inputName]}</p>\n        )}\n    </label>\n  );\n}\n\nexport default TextInput;\n","import React from \"react\";\nimport { FieldAttributes, FormikTouched, FormikErrors } from \"formik\";\nimport \"./style.scss\";\n\ntype FormikField = FieldAttributes<any>;\ninterface IRadioInputProps {\n  inputName: string;\n  FormikConnectorTag: FormikField;\n  generalLabelName:\n    | string\n    | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n  required: boolean;\n  radioInputData: Array<{\n    labelName: string | React.ReactElement<string>;\n    value: string | boolean;\n  }>;\n  touched?: FormikTouched<any>;\n  errors?: FormikErrors<any>;\n}\n\nfunction RadioInput(props: IRadioInputProps) {\n  const {\n    inputName,\n    generalLabelName,\n    radioInputData,\n    required,\n    FormikConnectorTag,\n    touched,\n    errors,\n  } = props;\n\n  return (\n    <div className=\"radio-btn-container\">\n      <div className=\"label-name\">\n        <h2>{generalLabelName}</h2>\n        {required &&\n          touched &&\n          touched[inputName] &&\n          errors &&\n          errors[inputName] && (\n            <p className=\"error-message\">{errors[inputName]}</p>\n          )}\n      </div>\n      <div className=\"radio-btn-block\">\n        {radioInputData.map((input, i) => {\n          return (\n            <label className=\"radio-btn\" key={`${input}${i}`}>\n              <FormikConnectorTag\n                type=\"radio\"\n                name={inputName}\n                value={input.value}\n              />\n              <p className=\"label-name\">{input.labelName}</p>\n            </label>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default RadioInput;\n","import React from \"react\";\nimport { FieldAttributes, FormikTouched, FormikErrors } from \"formik\";\nimport \"./style.scss\";\n\ntype FormikField = FieldAttributes<any>;\ninterface ICheckboxProps {\n  inputName: string;\n  FormikConnectorTag: FormikField;\n  generalLabelName?: string;\n  required: boolean;\n  checkboxData: Array<{\n    labelName:\n      | string\n      | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n    link?:\n      | string\n      | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n    value: string;\n  }>;\n  touched?: FormikTouched<any>;\n  errors?: FormikErrors<any>;\n  externalAction?: (state: boolean) => void;\n  isChecked: string[];\n  setChecked: (value: string) => void;\n  isDataSubmitted?: boolean;\n}\n\n// const inputValues: string[] = [];\n\nfunction Checkbox(props: ICheckboxProps) {\n  const {\n    inputName,\n    generalLabelName,\n    checkboxData,\n    required,\n    FormikConnectorTag,\n    touched,\n    errors,\n    externalAction,\n    isChecked,\n    setChecked,\n    isDataSubmitted,\n  } = props;\n\n  React.useEffect(() => {\n    if (isDataSubmitted) {\n      setChecked(\"agree\");\n    }\n  }, [isDataSubmitted]);\n  // это костыль, sorry - баг вылез уже перед отправкой задания на проверку\n\n  return (\n    <div className=\"checkbox-container\">\n      <h2>{generalLabelName && generalLabelName}</h2>\n\n      <p className=\"error-message\">\n        {required &&\n          touched &&\n          touched[inputName] &&\n          errors &&\n          errors[inputName] && <span>{errors[inputName]}</span>}\n      </p>\n\n      {checkboxData.map((input, i) => {\n        return (\n          <div key={`${input}${i}`} className=\"checkbox\">\n            <FormikConnectorTag\n              type=\"checkbox\"\n              name={inputName}\n              value={input.value}\n              checked={isChecked.includes(input.value)}\n              onClick={() => setChecked(input.value)}\n            />\n            <p className=\"label-name\">\n              {input.labelName}\n              {input.link && (\n                <span\n                  onClick={() => {\n                    externalAction && externalAction(true);\n                  }}\n                >\n                  {input.link}\n                </span>\n              )}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Checkbox;\n","import React from \"react\";\nimport { getAllInputsData, getInputDefaultValues } from \"shared/utils\";\nexport interface IInputData {\n  name: string;\n  label: React.ReactElement<string> | string;\n  placeholder?: string;\n  type: string;\n  required: boolean;\n  defaultValue: string | null | boolean | Array<string>;\n  options?: Array<{\n    labelName:\n      | string\n      | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n    link?:\n      | string\n      | React.ReactElement<string, string | React.JSXElementConstructor<any>>;\n    value: string;\n  }>;\n}\n\ninterface IBlock {\n  title?: string;\n  inputs: IInputData[];\n}\n\nexport interface IFormBlockData {\n  [blockName: string]: IBlock;\n}\n\nexport const formName = \"Анкета соискателя\";\nexport const formBlocks: IFormBlockData = {\n  privateData: {\n    title: \"Личные данные\",\n    inputs: [\n      {\n        name: \"firstName\",\n        label: (\n          <p>\n            Имя<sup>*</sup>\n          </p>\n        ),\n        placeholder: \"Имя\",\n        type: \"text\",\n        required: true,\n        defaultValue: \"\",\n      },\n      {\n        name: \"lastName\",\n        label: (\n          <p>\n            Фамилия<sup>*</sup>\n          </p>\n        ),\n        placeholder: \"Фамилия\",\n        type: \"text\",\n        required: true,\n        defaultValue: \"\",\n      },\n      {\n        name: \"email\",\n        label: (\n          <p>\n            Электронная почта<sup>*</sup>\n          </p>\n        ),\n        placeholder: \"Электронная почта\",\n        type: \"email\",\n        required: true,\n        defaultValue: \"\",\n      },\n      {\n        name: \"file\",\n        label: \"Загрузить резюме\",\n        type: \"file\",\n        required: false,\n        defaultValue: null,\n      },\n      {\n        name: \"gender\",\n        label: (\n          <p>\n            Пол<sup>*</sup>\n          </p>\n        ),\n        type: \"radio\",\n        required: true,\n        defaultValue: \"\",\n        options: [\n          { labelName: \"Мужской\", value: \"male\" },\n          { labelName: \"Женский\", value: \"female\" },\n        ],\n      },\n    ],\n  },\n  gitHubSection: {\n    title: \"Github\",\n    inputs: [\n      {\n        name: \"githubLink\",\n        label: <p>Вставьте ссылку на Github</p>,\n        placeholder: \"Вставьте ссылку на Github\",\n        type: \"text\",\n        required: false,\n        defaultValue: \"\",\n      },\n    ],\n  },\n  privacyPolicyCheck: {\n    inputs: [\n      {\n        name: \"privacyPolicy\",\n        label: \"\",\n        type: \"checkbox\",\n        options: [\n          {\n            labelName: (\n              <>\n                <sup>*</sup>Я согласен с{\" \"}\n              </>\n            ),\n            link: \"политикой конфиденциальности\",\n            value: \"agree\",\n          },\n        ],\n        required: true,\n        defaultValue: \"\",\n      },\n    ],\n  },\n};\n\nconst allInputs = getAllInputsData(formBlocks);\nexport const inputDefaultValues = getInputDefaultValues(allInputs);\n\nconsole.log(inputDefaultValues);\n","import { IFormBlockData, IInputData } from \"components/ApplicantForm/formData\";\n\nexport const getAllInputsData = (\n  formBlocks: IFormBlockData\n): Array<IInputData> => {\n  const formBlocksKeys = Object.keys(formBlocks);\n  const inputs = formBlocksKeys.reduce((prev: any, curr) => {\n    prev.push(...formBlocks[curr].inputs);\n    return prev;\n  }, []);\n  return inputs;\n};\n\nexport interface IDefaultInputValues {\n  [inputName: string]: string | null | boolean;\n}\n\nexport const getInputDefaultValues = (\n  inputs: Array<IInputData>\n): IDefaultInputValues => {\n  return inputs.reduce((prev: any, curr: any) => {\n    if (!(curr.name in prev)) {\n      prev[curr.name] = curr.defaultValue;\n    }\n    return prev;\n  }, {});\n};\n\nexport function acceptPrivacyPolicy(\n  checkBoxName: string,\n  checkBoxValue: string,\n  currentState: string[],\n  setState: (value: string) => void,\n  setFormikValue: (checkBoxName: string, checkBoxValue: string[]) => void\n): void {\n  if (currentState.includes(checkBoxValue)) {\n    return;\n  } else {\n    setState(checkBoxValue);\n    setFormikValue(checkBoxName, [checkBoxValue]);\n  }\n}\n\nexport function declinePrivacyPolicy(\n  checkBoxName: string,\n  checkBoxValue: string,\n  currentState: string[],\n  setState: (value: string) => void,\n  setFormikValue: (checkBoxName: string, checkBoxValue: string[]) => void\n): void {\n  if (!currentState.includes(checkBoxValue)) {\n    return;\n  } else {\n    setState(checkBoxValue);\n    setFormikValue(checkBoxName, [\"\"]);\n  }\n}\n","// import React from 'react';\nimport FileInput from \"components/FileInput\";\nimport { Formik, Field, Form } from \"formik\";\nimport SubmitModal from \"components/SubmitModal\";\nimport PrivatePolicyModal from \"components/PrivacyPolicyModal\";\nimport validate from \"./validation/validation\";\nimport TextInput from \"components/TextInput\";\nimport RadioInput from \"components/RadioInput\";\nimport Checkbox from \"components/Checkbox\";\nimport { formName, formBlocks, inputDefaultValues } from \"./formData\";\n\nimport { acceptPrivacyPolicy, declinePrivacyPolicy } from \"shared/utils\";\nimport \"./style.scss\";\n\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from \"classnames\";\n\ninterface IApplicantFormProps {\n  isOpenSubmitWindow: boolean;\n  isOpenPolicyWindow: boolean;\n  setOpenSubmitWindow: (state: boolean) => void;\n  setOpenPolicyWindow: (state: boolean) => void;\n  checkedValues: string[];\n  setCheckedValues: (value: string) => void;\n  isSubmitAvailable: boolean;\n  setSubmitAvailable: (state: boolean) => void;\n  userName: string | null;\n  formDataHandler: (formValues: any) => void;\n  isDataSubmitted: boolean;\n}\n\nfunction ApplicantForm(props: IApplicantFormProps) {\n  const {\n    isOpenSubmitWindow,\n    isOpenPolicyWindow,\n    setOpenSubmitWindow,\n    setOpenPolicyWindow,\n    checkedValues,\n    setCheckedValues,\n    isSubmitAvailable,\n    setSubmitAvailable,\n    userName,\n    formDataHandler,\n    isDataSubmitted,\n  } = props;\n\n  const submitButtonClasses = classNames({\n    \"submit-button\": true,\n    \"submit-button--disabled\": !isSubmitAvailable,\n  });\n\n  return (\n    <div className=\"form-container\">\n      <h1>{formName}</h1>\n      <Formik\n        initialValues={inputDefaultValues}\n        onSubmit={(values, { resetForm }) => {\n          formDataHandler(values);\n          setOpenSubmitWindow(true);\n          resetForm();\n        }}\n        validate={(values) => validate(values, setSubmitAvailable)}\n      >\n        {({ setFieldValue, errors, touched }) => (\n          <Form>\n            <div className=\"private-data\">\n              <h2>{formBlocks.privateData.title}</h2>\n\n              <div className=\"private-data__fields\">\n                {formBlocks.privateData.inputs.map((input, i) => {\n                  if (input.type === \"file\") {\n                    return (\n                      <div key={`${input}_${i}`}>\n                        <FileInput\n                          labelName={input.label}\n                          inputName={input.name}\n                          setFieldValue={setFieldValue}\n                          required={true}\n                          errors={errors}\n                          isDataSubmitted={isDataSubmitted}\n                        />\n                      </div>\n                    );\n                  } else if (input.type === \"radio\") {\n                    return (\n                      <div key={`${input}_${i}`}>\n                        <RadioInput\n                          inputName={input.name}\n                          generalLabelName={input.label}\n                          FormikConnectorTag={Field}\n                          required={input.required}\n                          radioInputData={input.options ? input.options : []}\n                          touched={touched}\n                          errors={errors}\n                        />\n                      </div>\n                    );\n                  } else {\n                    return (\n                      <div key={`${input}_${i}`}>\n                        <TextInput\n                          FormikConnectorTag={Field}\n                          inputName={input.name}\n                          inputPlaceholder={input.placeholder}\n                          labelName={input.label}\n                          required={input.required}\n                          touched={touched}\n                          errors={errors}\n                        />\n                      </div>\n                    );\n                  }\n                })}\n              </div>\n            </div>\n\n            <div className=\"github-link\">\n              <h2>{formBlocks.gitHubSection.title}</h2>\n              {formBlocks.gitHubSection.inputs.map((input, i) => {\n                return (\n                  <div key={`${input}_${i}`}>\n                    <TextInput\n                      FormikConnectorTag={Field}\n                      inputName={input.name}\n                      labelName={input.label}\n                      inputPlaceholder={input.placeholder}\n                      required={input.required}\n                      touched={touched}\n                      errors={errors}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"privacy-policy\">\n              <h2>{formBlocks.privacyPolicyCheck.title}</h2>\n              {formBlocks.privacyPolicyCheck.inputs.map((input, i) => {\n                return (\n                  <div key={`${input}_${i}`}>\n                    <Checkbox\n                      inputName={input.name}\n                      FormikConnectorTag={Field}\n                      required={input.required}\n                      touched={touched}\n                      errors={errors}\n                      checkboxData={input.options ? input.options : []}\n                      externalAction={setOpenPolicyWindow}\n                      isChecked={checkedValues}\n                      setChecked={setCheckedValues}\n                      isDataSubmitted={isDataSubmitted}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n\n            <Button className={submitButtonClasses} type=\"submit\">\n              Отправить\n            </Button>\n\n            <SubmitModal\n              userName={userName && userName}\n              openState={isOpenSubmitWindow}\n              setOpenState={setOpenSubmitWindow}\n            />\n            <PrivatePolicyModal\n              openState={isOpenPolicyWindow}\n              setOpenState={setOpenPolicyWindow}\n              acceptAction={() => {\n                acceptPrivacyPolicy(\n                  // * to set checkbox value remotely\n                  \"privacyPolicy\",\n                  \"agree\",\n                  checkedValues,\n                  setCheckedValues,\n                  setFieldValue\n                );\n              }}\n              declineAction={() => {\n                declinePrivacyPolicy(\n                  // * to set checkbox value remotely\n                  \"privacyPolicy\",\n                  \"agree\",\n                  checkedValues,\n                  setCheckedValues,\n                  setFieldValue\n                );\n              }}\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default ApplicantForm;\n","import { createSelector } from \"reselect\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AnyAction } from \"redux\";\n// import axios from 'axios';\nimport { IAction, IStore } from \"./interfaces\";\n\nexport const moduleName = \"applicantForm\";\n\nexport const SET_OPEN_SUBMIT_WINDOW = `${moduleName}/SET_OPEN_SUBMIT_WINDOW`;\nexport const SET_OPEN_POLICY_WINDOW = `${moduleName}/SET_OPEN_POLICY_WINDOW`;\nexport const SET_CHECKED_VALUES = `${moduleName}/SET_CHECKED_VALUES`;\nexport const SET_SUBMIT_AVAILABLE = `${moduleName}/SET_SUBMIT_AVAILABLE`;\nexport const SET_USER_NAME = `${moduleName}/SET_USER_NAME`;\nexport const HANDLE_FORM_DATA = `${moduleName}/HANDLE_FORM_DATA`;\nexport const CATCH_ERROR = `${moduleName}/CATCH_ERROR`;\nexport const SET_DATA_SUBMITTED = `${moduleName}/SET_DATA_SUBMITTED`;\n\nexport interface IReducerRecord {\n  isOpenSubmitWindow: boolean;\n  isOpenPolicyWindow: boolean;\n  checkedValues: Array<string>;\n  isSubmitAvailable: boolean;\n  userName: string | null;\n  formData: any;\n  isDataSubmitted: boolean;\n  error: string | null;\n}\n\nexport const reducerRecord: IReducerRecord = {\n  isOpenSubmitWindow: false,\n  isOpenPolicyWindow: false,\n  checkedValues: [],\n  isSubmitAvailable: false,\n  userName: null,\n  formData: {},\n  error: null,\n  isDataSubmitted: false,\n};\n\nexport default function reducer(state = reducerRecord, action: IAction) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_OPEN_SUBMIT_WINDOW:\n      return Object.assign({}, state, {\n        isOpenSubmitWindow: payload,\n      });\n    case SET_OPEN_POLICY_WINDOW:\n      return Object.assign({}, state, {\n        isOpenPolicyWindow: payload,\n      });\n    case SET_CHECKED_VALUES:\n      return Object.assign({}, state, {\n        checkedValues: payload,\n      });\n    case SET_SUBMIT_AVAILABLE:\n      return Object.assign({}, state, {\n        isSubmitAvailable: payload,\n      });\n    case SET_USER_NAME:\n      return Object.assign({}, state, {\n        userName: payload,\n      });\n    case HANDLE_FORM_DATA:\n      return Object.assign({}, state, {\n        formData: payload,\n      });\n    case CATCH_ERROR:\n      return Object.assign({}, state, {\n        error: payload,\n      });\n    case SET_DATA_SUBMITTED:\n      return Object.assign({}, state, {\n        isDataSubmitted: payload,\n      });\n    default:\n      return state;\n  }\n}\n\nexport const stateSelector = (state: IStore<IReducerRecord>) =>\n  state[moduleName];\nexport const isOpenSubmitWindowSelector = createSelector(\n  stateSelector,\n  (state) => state.isOpenSubmitWindow\n);\nexport const isOpenPolicyWindowSelector = createSelector(\n  stateSelector,\n  (state) => state.isOpenPolicyWindow\n);\nexport const checkedValuesSelector = createSelector(\n  stateSelector,\n  (state) => state.checkedValues\n);\nexport const isSubmitAvailableSelector = createSelector(\n  stateSelector,\n  (state) => state.isSubmitAvailable\n);\nexport const userNameSelector = createSelector(\n  stateSelector,\n  (state) => state.userName\n);\nexport const formDataSelector = createSelector(\n  stateSelector,\n  (state) => state.formData\n);\nexport const isDataSubmittedSelector = createSelector(\n  stateSelector,\n  (state) => state.isDataSubmitted\n);\n\nexport const setOpenSubmitWindow =\n  (\n    openState: boolean\n  ): ThunkAction<void, IStore<IReducerRecord>, unknown, AnyAction> =>\n  (dispatch): void => {\n    dispatch({\n      type: SET_OPEN_SUBMIT_WINDOW,\n      payload: openState,\n    });\n  };\nexport const setOpenPolicyWindow =\n  (\n    openState: boolean\n  ): ThunkAction<void, IStore<IReducerRecord>, unknown, AnyAction> =>\n  (dispatch): void => {\n    dispatch({\n      type: SET_OPEN_POLICY_WINDOW,\n      payload: openState,\n    });\n  };\n\nexport const setCheckedValues =\n  (\n    checkboxValue: string\n  ): ThunkAction<void, IStore<IReducerRecord>, unknown, AnyAction> =>\n  (dispatch, getState): void => {\n    const currentCheckedValues = checkedValuesSelector(getState());\n    const nextCheckedValues = currentCheckedValues.includes(checkboxValue)\n      ? currentCheckedValues.filter((value: string) => value !== checkboxValue)\n      : [...currentCheckedValues, checkboxValue];\n\n    dispatch({\n      type: SET_CHECKED_VALUES,\n      payload: nextCheckedValues,\n    });\n  };\n\nexport const setSubmitAvailable =\n  (\n    submitState: boolean\n  ): ThunkAction<void, IStore<IReducerRecord>, unknown, AnyAction> =>\n  (dispatch): void => {\n    dispatch({\n      type: SET_SUBMIT_AVAILABLE,\n      payload: submitState,\n    });\n  };\n\nexport const formDataHandler =\n  (\n    formValues: any\n  ): ThunkAction<void, IStore<IReducerRecord>, unknown, AnyAction> =>\n  async (dispatch, getState): Promise<any> => {\n    dispatch({\n      type: HANDLE_FORM_DATA,\n      payload: formValues,\n    });\n\n    const formData = formDataSelector(getState());\n    const userName = formData.firstName;\n\n    dispatch({\n      type: SET_USER_NAME,\n      payload: userName,\n    });\n\n    const dataToSend = formData;\n\n    /**\n     * TODO: there should be configuration data for further forwarding the form data to the server\n     * for example:\n     * const config: any = {\n     *  method: 'post',\n     *  url: '/',\n     *  headers: {\n     *      'Content-Type': 'application/json'\n     *  },\n     *  data : dataToSend\n     * }\n     */\n\n    try {\n      // await axios(config)\n      // * sending data to server\n      console.log(\"Данные отправлены: \", dataToSend);\n      dispatch({\n        type: SET_DATA_SUBMITTED,\n        payload: true,\n      });\n    } catch (err) {\n      const error = err?.response?.data;\n      console.log(error);\n      await dispatch({\n        type: CATCH_ERROR,\n        payload: error,\n      });\n    }\n  };\n","import { connect } from \"react-redux\";\nimport ApplicantForm from \"./ApplicantForm\";\nimport { IStore } from \"../../ducks/interfaces\";\n\nimport {\n  IReducerRecord,\n  isOpenSubmitWindowSelector,\n  setOpenSubmitWindow,\n  isOpenPolicyWindowSelector,\n  setOpenPolicyWindow,\n  checkedValuesSelector,\n  setCheckedValues,\n  isSubmitAvailableSelector,\n  setSubmitAvailable,\n  userNameSelector,\n  formDataSelector,\n  formDataHandler,\n  isDataSubmittedSelector,\n} from \"../../ducks/applicatForm\";\n\nexport default connect(\n  (state: IStore<IReducerRecord>) => ({\n    isOpenSubmitWindow: isOpenSubmitWindowSelector(state),\n    isOpenPolicyWindow: isOpenPolicyWindowSelector(state),\n    checkedValues: checkedValuesSelector(state),\n    isSubmitAvailable: isSubmitAvailableSelector(state),\n    userName: userNameSelector(state),\n    formData: formDataSelector(state),\n    isDataSubmitted: isDataSubmittedSelector(state),\n  }),\n  {\n    setOpenSubmitWindow,\n    setOpenPolicyWindow,\n    setCheckedValues,\n    setSubmitAvailable,\n    formDataHandler,\n  }\n)(ApplicantForm);\n","import React from \"react\";\nimport ApplicantForm from \"components/ApplicantForm\";\n\nfunction App() {\n  return <ApplicantForm />;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport applicantFormReducer, {\n  moduleName as applicantForm,\n} from \"ducks/applicatForm\";\n\nexport default combineReducers({ [applicantForm]: applicantFormReducer });\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducer\";\n\nconst enhancer = applyMiddleware(thunk, logger);\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}